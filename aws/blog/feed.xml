<?xml version="1.0" encoding="utf-8"?>
<feed xml:base="https://servo.org" xmlns="http://www.w3.org/2005/Atom">
  <title>Servo Blog</title>
  <subtitle>All the entries in the Servo blog.</subtitle>
  <link href="https://servo.org/blog/feed.xml" rel="self"/>
  <link href="https://servo.org"/>
  <updated>2024-01-26T00:00:00Z</updated>
  <id>https://servo.org</id>
  <author>
    <name>Servo Team</name>
    <email>info@servo.org</email>
  </author>
  <entry>
    <title>Two months in Servo: better inline layout, stable Rust, and more!</title>
    <link href="https://servo.org/aws/blog/2024/01/26/two-months-in-servo/"/>
    <updated>2024-01-26T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2024/01/26/two-months-in-servo/</id>
    <content xml:lang="en" type="html">&lt;figure class=&quot;_figr&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/layout-2020-justify.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/layout-2020-justify.png&quot; alt=&quot;Servo nightly showing support for ‘text-align-last’, ‘text-align: justify’, ‘vertical-align: baseline’, and ‘position: sticky’&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;Servo has had some exciting changes land in our nightly builds over the last month:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as of 2023-12-27, the ‘text-align-last’ property is now supported (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30905&quot;&gt;#30905&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-12-27, ‘text-align: justify’ is now supported (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30807&quot;&gt;#30807&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30866&quot;&gt;#30866&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2024-01-09, ‘line-height’ and ‘vertical-align’ are now moderately supported (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30902&quot;&gt;#30902&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2024-01-24, ‘Event#composedPath()’ is now supported (&lt;a href=&quot;https://github.com/gterzian&quot;&gt;@gterzian&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31123&quot;&gt;#31123&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;_figl&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/layout-2020-tables.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/layout-2020-tables.png&quot; alt=&quot;Servo nightly showing rudimentary support for table layouts when the pref is enabled&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;We’ve started working on support for &lt;strong&gt;sticky positioning&lt;/strong&gt; and &lt;strong&gt;tables&lt;/strong&gt; in the new layout engine, with some very early sticky positioning code landing in 2023-11-30 (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30686&quot;&gt;#30686&lt;/a&gt;), the CSS tables tests now enabled (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31131&quot;&gt;#31131&lt;/a&gt;), and rudimentary table layout landing in 2024-01-20 under the &lt;code&gt;layout.tables.enabled&lt;/code&gt; pref (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/Loirooriol&quot;&gt;@Loirooriol&lt;/a&gt;, &lt;a href=&quot;https://github.com/Manishearth&quot;&gt;@Manishearth&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30799&quot;&gt;#30799&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30868&quot;&gt;#30868&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31121&quot;&gt;#31121&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Geometry in our new layout engine is now being migrated from floating-point coordinates (&lt;code&gt;f32&lt;/code&gt;) to &lt;strong&gt;fixed-point coordinates&lt;/strong&gt; (&lt;code&gt;i32&lt;/code&gt; × 1/60) (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30825&quot;&gt;#30825&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30894&quot;&gt;#30894&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31135&quot;&gt;#31135&lt;/a&gt;), similar to other engines like WebKit and Blink.
While floating-point geometry was thought to be better for transformation-heavy content like SVG, the fact that larger values are less precise than smaller values causes a variety of rendering problems and test failures (&lt;a href=&quot;https://github.com/servo/servo/issues/29819&quot;&gt;#29819&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As a result of these changes, we’ve made big strides in our WPT pass rates:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CSS2 floats&lt;/strong&gt; (+3.3pp to 84.9%) and &lt;strong&gt;floats-clear&lt;/strong&gt; (+5.6pp to 78.9%) continue to surge&lt;/li&gt;
&lt;li&gt;we now surpass legacy layout in the &lt;strong&gt;CSS2 linebox&lt;/strong&gt; tests (&lt;strong&gt;61.1% → 87.9%&lt;/strong&gt;, legacy 86.4%)&lt;/li&gt;
&lt;li&gt;we now surpass legacy layout in the &lt;strong&gt;css-flexbox&lt;/strong&gt; tests (49.5% → 52.7%, legacy 52.2%)&lt;/li&gt;
&lt;li&gt;we’ve closed 76% of the gap in &lt;strong&gt;key CSS2 tests&lt;/strong&gt; (79.2% → 82.2%, legacy 83.1%)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;updates%2C-servoshell%2C-and-stability&quot; tabindex=&quot;-1&quot;&gt;Updates, servoshell, and stability &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2024/01/26/two-months-in-servo/#updates%2C-servoshell%2C-and-stability&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;GStreamer&lt;/strong&gt; has been updated from 0.15 to 0.21 (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30750&quot;&gt;#30750&lt;/a&gt;), fixing long-standing breakage of video playback.
&lt;strong&gt;WebGPU&lt;/strong&gt; has been updated from 0.17 to 0.18 (&lt;a href=&quot;https://github.com/sagudev&quot;&gt;@sagudev&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30926&quot;&gt;#30926&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30954&quot;&gt;#30954&lt;/a&gt;), and &lt;strong&gt;ANGLE&lt;/strong&gt; has been updated from &lt;a href=&quot;https://chromium.googlesource.com/angle/angle/+/refs/heads/chromium/3729&quot;&gt;April 2019&lt;/a&gt; to &lt;a href=&quot;https://chromium.googlesource.com/angle/angle/+/refs/heads/chromium/5359&quot;&gt;August 2023&lt;/a&gt; (&lt;a href=&quot;https://github.com/sagudev&quot;&gt;@sagudev&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30546&quot;&gt;#30546&lt;/a&gt;).&lt;/p&gt;
&lt;figure class=&quot;_figr&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/back-forward.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/back-forward.png&quot; alt=&quot;Servo nightly showing Back and Forward buttons in the minibrowser&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;Servo’s example browser now has &lt;strong&gt;Back and Forward buttons&lt;/strong&gt; (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30805&quot;&gt;#30805&lt;/a&gt;), and no longer shows the incorrect location when navigation takes a long time (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30518&quot;&gt;#30518&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Many stability improvements have landed, including fixes for a crash in inline layout (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30897&quot;&gt;#30897&lt;/a&gt;), three WebGPU-related crashes (&lt;a href=&quot;https://github.com/lucasMontenegro&quot;&gt;@lucasMontenegro&lt;/a&gt;, &lt;a href=&quot;https://github.com/gterzian&quot;&gt;@gterzian&lt;/a&gt;, &lt;a href=&quot;https://github.com/Taym95&quot;&gt;@Taym95&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30888&quot;&gt;#30888&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30989&quot;&gt;#30989&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31002&quot;&gt;#31002&lt;/a&gt;), a crash in the PerformanceResourceTiming API (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31063&quot;&gt;#31063&lt;/a&gt;), and several crashes due to script runtimes being dropped in the wrong order (&lt;a href=&quot;https://github.com/gterzian&quot;&gt;@gterzian&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30896&quot;&gt;#30896&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&quot;ci%2C-code-health%2C-and-dev-changes&quot; tabindex=&quot;-1&quot;&gt;CI, code health, and dev changes &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2024/01/26/two-months-in-servo/#ci%2C-code-health%2C-and-dev-changes&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The intermittent macOS build failures on CI should now be fixed (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30975&quot;&gt;#30975&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Servo now has some preliminary Android build support (&lt;a href=&quot;https://github.com/mukilan&quot;&gt;@mukilan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31086&quot;&gt;#31086&lt;/a&gt;), though more work needs to be done before Servo will run on Android.&lt;/p&gt;
&lt;p&gt;The long-term effort to simplify how Servo is built continues (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31075&quot;&gt;#31075&lt;/a&gt;), and we’ve replaced the &lt;code&gt;time&lt;/code&gt; crate with &lt;code&gt;chrono&lt;/code&gt; and &lt;code&gt;std::time&lt;/code&gt; in much of Servo (&lt;a href=&quot;https://github.com/Taym95&quot;&gt;@Taym95&lt;/a&gt;, &lt;a href=&quot;https://github.com/augustebaum&quot;&gt;@augustebaum&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30927&quot;&gt;#30927&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31020&quot;&gt;#31020&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30639&quot;&gt;#30639&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31079&quot;&gt;#31079&lt;/a&gt;).
We have also started migrating our DOM bindings to use typed arrays where possible (&lt;a href=&quot;https://github.com/gterzian&quot;&gt;@gterzian&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30990&quot;&gt;#30990&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31077&quot;&gt;#31077&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31087&quot;&gt;#31087&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31076&quot;&gt;#31076&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31106&quot;&gt;#31106&lt;/a&gt;), as part of an effort to &lt;strong&gt;reduce our unsafe code surface&lt;/strong&gt; (&lt;a href=&quot;https://github.com/servo/servo/issues/30889&quot;&gt;#30889&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/issues/30862&quot;&gt;#30862&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Several crates have been moved into &lt;a href=&quot;https://github.com/servo/servo&quot;&gt;our main repo&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hyper_serde&lt;/code&gt; (&lt;a href=&quot;https://github.com/servo/hyper_serde&quot;&gt;servo/hyper_serde&lt;/a&gt;) was moved to &lt;code&gt;components/hyper_serde&lt;/code&gt; (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30803&quot;&gt;#30803&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;device&lt;/code&gt; (&lt;a href=&quot;https://github.com/servo/devices&quot;&gt;servo/devices&lt;/a&gt;) was merged into &lt;code&gt;components/bluetooth&lt;/code&gt; (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30974&quot;&gt;#30974&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blurmac&lt;/code&gt; (&lt;a href=&quot;https://github.com/servo/devices&quot;&gt;servo/devices&lt;/a&gt;) was moved to &lt;code&gt;third_party/blurmac&lt;/code&gt; (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30974&quot;&gt;#30974&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ve also made some dev changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the default branch in &lt;a href=&quot;https://github.com/servo/servo&quot;&gt;our main repo&lt;/a&gt; is now &lt;code&gt;main&lt;/code&gt; (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/atouchet&quot;&gt;@atouchet&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/commit/23add0c1e5c9cbdf0301b891d265e363d049532b&quot;&gt;23add0c1e5c9c&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30877&quot;&gt;#30877&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;we now target &lt;strong&gt;Rust 1.74&lt;/strong&gt; stable, marking the first time ever we have built without unstable features (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30831&quot;&gt;#30831&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;we now require &lt;strong&gt;Python 3.10&lt;/strong&gt; (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31088&quot;&gt;#31088&lt;/a&gt;), and you no longer need to install virtualenv (&lt;a href=&quot;https://github.com/frewsxcv&quot;&gt;@frewsxcv&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30377&quot;&gt;#30377&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;we’ve fixed problems building Servo on &lt;strong&gt;Ubuntu 20.04&lt;/strong&gt; (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31019&quot;&gt;#31019&lt;/a&gt;) and &lt;strong&gt;NixOS&lt;/strong&gt; (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31052&quot;&gt;#31052&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31055&quot;&gt;#31055&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30987&quot;&gt;#30987&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;we now support &lt;strong&gt;Visual Studio 2022&lt;/strong&gt; on Windows (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31148&quot;&gt;#31148&lt;/a&gt;), the same version that rustup installs by default&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;linux-build-issues&quot; tabindex=&quot;-1&quot;&gt;Linux build issues &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2024/01/26/two-months-in-servo/#linux-build-issues&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Several people have reported problems building Servo on newer Linux distro versions, particularly &lt;a href=&quot;https://github.com/servo/servo/issues/31059&quot;&gt;with clang 15&lt;/a&gt; or &lt;a href=&quot;https://github.com/servo/servo/issues/30587&quot;&gt;with clang 16&lt;/a&gt;.
While we’re still working on fixing the underlying issues, there are some workarounds.
If your distro lets you install older versions of clang with a package like &lt;code&gt;clang-14&lt;/code&gt;, you can tell Servo to use it with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export CC=/usr/bin/clang-14
export CXX=/usr/bin/clang++-14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively you can try our new Nix-based dev environment, which should now work on any Linux distro (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/31001&quot;&gt;#31001&lt;/a&gt;).
&lt;a href=&quot;https://nixos.org/manual/nix/stable/&quot;&gt;Nix&lt;/a&gt; is a package manager with some unusual benefits.
Servo can use Nix to find the correct versions of all of its compilers and build dependencies without needing you to install them or run &lt;code&gt;mach bootstrap&lt;/code&gt;.
All you need to do is install Nix, and &lt;code&gt;export MACH_USE_NIX=&lt;/code&gt; to your environment.
&lt;a href=&quot;https://github.com/servo/servo/wiki/Building#nix-on-other-distros&quot;&gt;See the wiki&lt;/a&gt; for more details!&lt;/p&gt;
&lt;style&gt;
    /* guaranteed minimum width for first paragraph after a float */
    ._floatmin {
        display: block;
        width: 13em;
        overflow: hidden;
    }
    ._none {
        display: none;
    }
    ._fig:not(#specificity) {
        width: 33em;
        max-width: 100%;
        margin: 1em auto;
    }
    ._fig &gt; ._flex {
        display: flex;
    }
    ._fig._min {
        width: min-content;
    }
    ._fig table {
        text-align: initial;
    }
    ._fig figcaption._notes {
        text-align: left;
        width: max-content;
        max-width: 100%;
    }
    ._figl:not(#specificity),
    ._figr:not(#specificity) {
        margin: 0 1em 1em;
    }
    ._figl {
        float: left;
    }
    ._figr {
        float: right;
    }
    ._figl &gt; iframe,
    ._figr &gt; iframe,
    ._figl &gt; a &gt; img,
    ._figr &gt; a &gt; img {
        width: 21em;
        max-width: max-content;
    }
    ._runin {
        margin-bottom: 1em;
    }
    ._runin &gt; p,
    ._runin &gt; h2 {
        display: inline;
    }
    ._correction {
        max-width: 33em;
        margin: 1em auto;
        border-bottom: 1px solid;
        padding-bottom: 1em;
    }
&lt;/style&gt;
</content>
  </entry>
  <entry>
    <title>Tauri update: embedding prototype, offscreen rendering, multiple webviews, and more!</title>
    <link href="https://servo.org/aws/blog/2024/01/19/embedding-update/"/>
    <updated>2024-01-19T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2024/01/19/embedding-update/</id>
    <content xml:lang="en" type="html">&lt;p&gt;&lt;a href=&quot;https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/&quot;&gt;Back in November&lt;/a&gt;, we highlighted our ongoing efforts to make Servo more embeddable, and today we are a few steps closer!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tauri.app/&quot;&gt;Tauri&lt;/a&gt; is a framework for building desktop apps that combine a web frontend with a Rust backend, and work is already ongoing to expand it to mobile apps and other backend languages.
But unlike say, Electron or React Native, Tauri is both engine-agnostic and frontend-agnostic, allowing you to use any frontend tooling you like and whichever web engine makes the most sense for your users.&lt;/p&gt;
&lt;p&gt;To integrate Servo with Tauri, we need to add &lt;strong&gt;support for Servo in &lt;a href=&quot;https://github.com/tauri-apps/wry&quot;&gt;WRY&lt;/a&gt;&lt;/strong&gt;, the underlying webview library, and the developers of Tauri have created a proof of concept doing exactly that!
While this is definitely not production-ready yet, you can play around with it by checking out the &lt;a href=&quot;https://github.com/tauri-apps/wry/tree/servo-wry-demo&quot;&gt;servo-wry-demo&lt;/a&gt; branch (&lt;a href=&quot;https://github.com/tauri-apps/wry/tree/305220efbe4e8b5813543a7b8f5d8e0a8abb7fbc&quot;&gt;permalink&lt;/a&gt;) and following the README.&lt;/p&gt;
&lt;figure class=&quot;_fig&quot; id=&quot;_wry_demo_fig&quot;&gt;
&lt;iframe src=&quot;https://servo.org/aws/img/blog/embedding-2024-01/demo-with-decorations-too.html&quot; id=&quot;_wry_demo&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;
&lt;p&gt;While servoshell, &lt;a href=&quot;https://servo.org/aws/blog/2023/09/15/upcoming-events-and-new-browser-ui/&quot;&gt;our example browser&lt;/a&gt;, continues to be the “reference” for embedding Servo, this has its limitations in that servoshell’s needs are often simpler than those of a general-purpose embeddable webview.
For example, the “minibrowser” UI needs the ability to reserve space at the top of the window, and hook the presenting of new frames to do extra drawing, but it doesn’t currently need multiple webviews.&lt;/p&gt;
&lt;p&gt;This is where working with the Tauri team has been especially invaluable for Servo — they’ve used their experience integrating with other embeddable webviews to guide changes on the Servo side.
Early changes include making it possible to &lt;strong&gt;position Servo webviews&lt;/strong&gt; anywhere within a native window (&lt;a href=&quot;https://github.com/wusyong&quot;&gt;@wusyong&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30088&quot;&gt;#30088&lt;/a&gt;), and give them &lt;strong&gt;translucent or transparent backgrounds&lt;/strong&gt; (&lt;a href=&quot;https://github.com/wusyong&quot;&gt;@wusyong&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30488&quot;&gt;#30488&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Support for &lt;strong&gt;multiple webviews&lt;/strong&gt; in one window is needed for parity with the other WRY backends.
Servo currently has a fairly pervasive assumption that only one webview is active at a time.
We’ve found almost all of the places where this assumption was made (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30648&quot;&gt;#30648&lt;/a&gt;), and now we’re breaking those findings into changes that can actually be reviewed and landed (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30840&quot;&gt;#30840&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30841&quot;&gt;#30841&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30842&quot;&gt;#30842&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Support for &lt;strong&gt;multiple windows&lt;/strong&gt; sounds similar, but it’s a lot harder.
Servo handles user input and drawing with a component known for historical reasons as the “compositor”.
Since the constellation — the heart of Servo — is currently associated with exactly one compositor, and the compositor is currently tightly coupled with the event loop of exactly one window, supporting multiple windows will require some big architectural changes.
&lt;a href=&quot;https://github.com/paulrouget&quot;&gt;@paulrouget&lt;/a&gt;’s extensive research and prior work on making Servo embeddable will prove especially helpful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Offscreen rendering&lt;/strong&gt; is critical for integrating Servo with apps containing non-Servo components.
For example, you might have a native app that uses Servo for online help or an OAuth flow, or a game that uses Servo for purchases or social features.
We can now draw Servo to an offscreen framebuffer and let the app decide how to present it (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30767&quot;&gt;#30767&lt;/a&gt;), rather than assuming control of the whole window, and servoshell now uses this ability except when the minibrowser is disabled (&lt;code&gt;--no-minibrowser&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Precompiling &lt;a href=&quot;https://github.com/servo/mozangle&quot;&gt;mozangle&lt;/a&gt;&lt;/strong&gt; and &lt;a href=&quot;https://github.com/servo/mozjs&quot;&gt;&lt;strong&gt;mozjs&lt;/strong&gt;&lt;/a&gt; would improve developer experience by reducing initial build times.
We can now build the C++ parts of mozangle as a dynamic library (.so/.dylib/.dll) on Linux and macOS (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/mozangle/pull/71&quot;&gt;mozangle#71&lt;/a&gt;), though more work is needed to distribute and make use of them.&lt;/p&gt;
&lt;p&gt;We’re exploring two approaches to precompiling mozjs.
The easier approach is to build the C++ parts as a static library (.a/.lib) and cache the generated Rust bindings (&lt;a href=&quot;https://github.com/wusyong&quot;&gt;@wusyong&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/mozjs/issues/439&quot;&gt;mozjs#439&lt;/a&gt;).
Building a dynamic library (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/mozjs/pull/432&quot;&gt;mozjs#432&lt;/a&gt;) will be more difficult, but it should reduce build times even further.&lt;/p&gt;
&lt;p&gt;Many thanks to &lt;a href=&quot;https://nlnet.nl/&quot;&gt;&lt;strong&gt;NLnet&lt;/strong&gt;&lt;/a&gt; for &lt;a href=&quot;https://nlnet.nl/project/Tauri-Servo/&quot;&gt;sponsoring this work&lt;/a&gt;.&lt;/p&gt;
&lt;style&gt;
    /* guaranteed minimum width for first paragraph after a float */
    ._floatmin {
        display: block;
        width: 13em;
        overflow: hidden;
    }
    ._none {
        display: none;
    }
    ._fig:not(#specificity) {
        width: 33em;
        max-width: 100%;
        margin: 1em auto;
    }
    ._fig &gt; ._flex {
        display: flex;
    }
    ._fig._min {
        width: min-content;
    }
    ._fig table {
        text-align: initial;
    }
    ._fig figcaption._notes {
        text-align: left;
        width: max-content;
        max-width: 100%;
    }
    ._figl:not(#specificity),
    ._figr:not(#specificity) {
        margin: 0 1em 1em;
    }
    ._figl {
        float: left;
    }
    ._figr {
        float: right;
    }
    ._figl &gt; iframe,
    ._figr &gt; iframe,
    ._figl &gt; a &gt; img,
    ._figr &gt; a &gt; img {
        width: 17em;
        max-width: max-content;
    }
    ._figl._default &gt; iframe,
    ._figr._default &gt; iframe,
    ._figl._default &gt; a &gt; img,
    ._figr._default &gt; a &gt; img {
        width: auto;
        max-width: 100%;
    }
    ._runin {
        margin-bottom: 1em;
    }
    ._runin &gt; p,
    ._runin &gt; h2 {
        display: inline;
    }
    ._correction {
        max-width: 33em;
        margin: 1em auto;
        border-bottom: 1px solid;
        padding-bottom: 1em;
    }
    #_wry_demo_fig:not(#specificity) {
        width: 100%;
    }
    #_wry_demo {
        margin: 0 auto;
        display: block;
        height: min(calc(100vh - 9em), 400px);
        width: 100%;
    }
&lt;/style&gt;
</content>
  </entry>
  <entry>
    <title>This year in Servo: over 1000 pull requests and beyond</title>
    <link href="https://servo.org/aws/blog/2023/12/18/this-year-in-servo/"/>
    <updated>2023-12-18T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/12/18/this-year-in-servo/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Servo is well and truly back.&lt;/p&gt;
&lt;figure class=&quot;_figr _default&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/recap-2023-contributors.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/recap-2023-contributors.png&quot; alt=&quot;Bar chart: 453 (44%) by Igalia, 195 (19%) by non-Igalia, 389 (37%) by bots&quot; /&gt;&lt;/a&gt;
&lt;figcaption&gt;Contributors to &lt;a href=&quot;https://github.com/servo/servo&quot;&gt;servo/servo&lt;/a&gt; in 2023.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&quot;_floatmin&quot;&gt;&lt;/span&gt;
This year, to date, we’ve had &lt;strong&gt;53 unique contributors&lt;/strong&gt; (+140% over 22 last year), landing &lt;strong&gt;1037 pull requests&lt;/strong&gt; (+382% over 215) and 2485 commits (+375% over 523), and that’s just in &lt;a href=&quot;https://github.com/servo/servo&quot;&gt;our main repo&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Individual contributors are especially important for the health of the project, and of the pull requests made by humans (rather than our &lt;a href=&quot;https://github.com/servo-wpt-sync&quot;&gt;friendly&lt;/a&gt; &lt;a href=&quot;https://github.com/dependabot&quot;&gt;bots&lt;/a&gt;), 30% were by people outside Igalia, and 18% were by non-reviewers.&lt;/p&gt;
&lt;p&gt;Servo has been featured in &lt;a href=&quot;https://servo.org/aws/about/&quot;&gt;six conference talks&lt;/a&gt; this year, including at &lt;a href=&quot;https://www.youtube.com/watch?v=IdHvHoAO5oo&quot;&gt;RustNL&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=pfk8s5OD99A&quot;&gt;Web Engines Hackfest&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=J4qedc-0pjs&amp;amp;t=2356s&quot;&gt;LF Europe Member Summit&lt;/a&gt;, &lt;a href=&quot;https://youtu.be/9lkIX5ryZZ4&quot;&gt;Open Source Summit Europe&lt;/a&gt;, &lt;a href=&quot;https://youtu.be/RugzThWcjn4&quot;&gt;GOSIM Workshop&lt;/a&gt;, and &lt;a href=&quot;https://www.youtube.com/watch?v=lx70W83Bxtc&quot;&gt;GOSIM Conference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Servo now has a usable “minibrowser” UI, now supports offscreen rendering, its experimental WebGPU support (&lt;code&gt;--pref dom.webgpu.enabled&lt;/code&gt;) has been updated, and Servo is now listed on &lt;a href=&quot;https://wpt.fyi/&quot;&gt;wpt.fyi&lt;/a&gt; again (click &lt;span style=&quot;font-variant-caps: all-small-caps;&quot;&gt;Edit&lt;/span&gt; to add Servo).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://servo.org/aws/blog/2023/04/13/layout-2013-vs-2020/&quot;&gt;Our new layout engine&lt;/a&gt; is now proving its strengths, with support for iframes, floats, stacking context improvements, inline layout improvements, margin collapsing, ‘position: sticky’, ‘min-width’ and ‘min-height’, ‘max-width’ and ‘max-height’, ‘align-content’, ‘justify-content’, ‘white-space’, ‘text-indent’, ‘text-align: justify’, &lt;a href=&quot;https://servo.org/aws/blog/2023/05/31/adding-support-for-outline-properties/&quot;&gt;‘outline’ and ‘outline-offset’&lt;/a&gt;, and ‘filter: drop-shadow()’.&lt;/p&gt;
&lt;figure class=&quot;_figl _default&quot; style=&quot;clear: both;&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/recap-2023-wpt.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/recap-2023-wpt.png&quot; alt=&quot;Bar chart: 17% + 64pp in floats, 18% + 55pp in floats-clear, 63% + 15pp in key CSS2 tests, 80% + 14pp in abspos, 34% + 14pp in CSS position module, 67% + 13pp in margin-padding-clear, 49% + 13pp in CSSOM, 51% + 10pp in all CSS tests, 49% + 6pp in all WPT tests&quot; /&gt;&lt;/a&gt;
&lt;figcaption style=&quot;max-width: 25em; margin: 0 auto;&quot;&gt;Pass rates in parts of the &lt;a href=&quot;https://web-platform-tests.org/&quot;&gt;Web Platform Tests&lt;/a&gt; with our new layout engine, showing the improvement we’ve made since the &lt;a href=&quot;https://servo.org/aws/blog/2023/07/20/servo-web-platform-tests/&quot;&gt;start of our data&lt;/a&gt; in April 2023.&lt;/figcaption&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&quot;_floatmin&quot; style=&quot;clear: right;&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://github.com/dbaron/inlines-and-floats&quot;&gt;Floats are notoriously tricky&lt;/a&gt;, to the point we found them &lt;a href=&quot;https://github.com/servo/servo/wiki/Servo-Layout-Engines-Report&quot;&gt;impossible to implement correctly&lt;/a&gt; in our legacy layout engine, but thanks to the move from eager to opportunistic parallelism, they are now supported fairly well.
Whereas legacy layout was only ever able to reach 53.9% in the floats tests and 68.2% in floats-clear, we’re now at &lt;strong&gt;82.2% in floats&lt;/strong&gt; (+28.3pp over legacy) and &lt;strong&gt;73.3% in floats-clear&lt;/strong&gt; (+5.1pp over legacy).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://acid1.acidtests.org/&quot;&gt;Acid1&lt;/a&gt; now passes in the new layout engine, and we’ve also surpassed legacy layout in the &lt;strong&gt;CSS2 abspos (by 50.0pp)&lt;/strong&gt;, CSS2 positioning (by 6.5pp), and CSS Position (by 4.4pp) test suites, while making big strides in others, like the &lt;strong&gt;CSSOM tests (+13.1pp)&lt;/strong&gt; and key parts of the &lt;strong&gt;CSS2 test suite (+15.8pp)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;_floatmin&quot; style=&quot;clear: both;&quot;&gt;&lt;/span&gt;
&lt;a href=&quot;https://github.com/servo/servo/wiki/Roadmap/106e95887c3d9768f791a4e0501ba5c89abe9636&quot;&gt;Next year&lt;/a&gt;, our funding will go towards maintaining Servo, releasing nightlies on Android, finishing our integration with Tauri (thanks to NLNet), and implementing tables and better support for floats and non-Latin text (thanks to NLNet).&lt;/p&gt;
&lt;p&gt;Servo will also be at &lt;a href=&quot;https://fosdem.org/2024/&quot;&gt;FOSDEM 2024&lt;/a&gt;, with Rakhi Sharma speaking about &lt;a href=&quot;https://fosdem.org/2024/schedule/event/fosdem-2024-2321-embedding-servo-in-rust-projects/&quot;&gt;embedding Servo in Rust projects&lt;/a&gt; on &lt;strong&gt;3 February&lt;/strong&gt; at &lt;strong&gt;16:45 local time&lt;/strong&gt; (15:45 UTC).
See you there!&lt;/p&gt;
&lt;p&gt;There’s a lot more we would like to do, so if you or a company you know are interested in sponsoring the development of an embeddable, independent, memory-safe, modular, parallel web rendering engine, we want to hear from you!
Head over to &lt;a href=&quot;https://servo.org/aws/sponsorship/&quot;&gt;our sponsorship page&lt;/a&gt;, or email &lt;a href=&quot;mailto:join@servo.org&quot;&gt;join@servo.org&lt;/a&gt; for enquiries.&lt;/p&gt;
&lt;p&gt;In a decade that many people feared would become the nadir of browser engine diversity, we hope we can help change that with Servo.&lt;/p&gt;
&lt;!--
pull request data
$ tools/list-pull-requests.sh servo/servo &#39;2022-.*&#39; | tee 2022.json
$ tools/list-pull-requests.sh servo/servo &#39;2023-.*&#39; | tee 2023.json

pull requests
- 2022: 215 (&lt; 2022.json jq -s length)
- 2023: 1037 (&lt; 2023.json jq -s length)

contributors
- 2022: 22 (&lt; 2022.json jq -r .user.login | sort | uniq -c | sort -nr | wc -l)
- 2023: 53 (&lt; 2023.json jq -r .user.login | sort | uniq -c | sort -nr | wc -l)

reviewers
- https://github.com/orgs/servo/teams/developers
- copy($$(&quot;#team-members li[data-bulk-actions-id]&quot;).map(x =&gt; x.dataset.bulkActionsId).sort().join(&quot;&#92;n&quot;))

commits
- 2022: 523 (git log --pretty=format:$&#39;%h&#92;t%cd&#39; | rg &#39; 2022 &#39; | wc -l)
- 2023: 2485 (git log --pretty=format:$&#39;%h&#92;t%cd&#39; | rg &#39; 2023 &#39; | wc -l)

for wpt pass rates and all other analysis, see assets/img/blog/recap-2023.ods
--&gt;
&lt;style&gt;
    /* guaranteed minimum width for first paragraph after a float */
    ._floatmin {
        display: block;
        width: 13em;
        overflow: hidden;
    }
    ._none {
        display: none;
    }
    ._fig:not(#specificity) {
        width: 33em;
        max-width: 100%;
        margin: 1em auto;
    }
    ._fig &gt; ._flex {
        display: flex;
    }
    ._fig._min {
        width: min-content;
    }
    ._fig table {
        text-align: initial;
    }
    ._fig figcaption._notes {
        text-align: left;
        width: max-content;
        max-width: 100%;
    }
    ._figl:not(#specificity),
    ._figr:not(#specificity) {
        margin: 0 1em 1em;
    }
    ._figl {
        float: left;
    }
    ._figr {
        float: right;
    }
    ._figl &gt; iframe,
    ._figr &gt; iframe,
    ._figl &gt; a &gt; img,
    ._figr &gt; a &gt; img {
        width: 17em;
        max-width: max-content;
    }
    ._figl._default &gt; iframe,
    ._figr._default &gt; iframe,
    ._figl._default &gt; a &gt; img,
    ._figr._default &gt; a &gt; img {
        width: auto;
        max-width: 100%;
    }
    ._runin {
        margin-bottom: 1em;
    }
    ._runin &gt; p,
    ._runin &gt; h2 {
        display: inline;
    }
    ._correction {
        max-width: 33em;
        margin: 1em auto;
        border-bottom: 1px solid;
        padding-bottom: 1em;
    }
&lt;/style&gt;
</content>
  </entry>
  <entry>
    <title>This month in Servo: better floats, color-mix(), try job labels, and more!</title>
    <link href="https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/"/>
    <updated>2023-11-30T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/</id>
    <content xml:lang="en" type="html">&lt;aside class=&quot;_correction&quot;&gt;
&lt;p&gt;&lt;strong&gt;Correction (2023-12-04)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/servo/servo.org/pull/126&quot;&gt;An earlier version&lt;/a&gt; of this post said that Servo now supports the &lt;strong&gt;:has() selector&lt;/strong&gt;, but this was incorrect.
While some of the code implementing the feature has landed, it is &lt;a href=&quot;https://github.com/servo/servo/blob/7bcb25c85c98c367c6423ebc0fed964dd08cad56/components/selectors/parser.rs#L276-L279&quot;&gt;not yet enabled&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;November has been another exciting month for Servo!&lt;/p&gt;
&lt;p&gt;Our nightly example browser, servoshell, is now easier to navigate, &lt;strong&gt;accepting URLs without http:// or https://&lt;/strong&gt; both in the location bar and on the command line (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;, &lt;a href=&quot;https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/30148&quot;&gt;#30148&lt;/a&gt;), and should no longer lock up when run with &lt;code&gt;--no-minibrowser&lt;/code&gt; (&lt;a href=&quot;https://github.com/wusyong&quot;&gt;@wusyong&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30598&quot;&gt;#30598&lt;/a&gt;).
Local paths can also be given on the command line, and are still preferred when the path points to a file that exists.&lt;/p&gt;
&lt;p&gt;Work is now underway to &lt;a href=&quot;https://servo.org/aws/blog/2023/10/26/css-filters-testing-tauri/#embeddable-web-engine&quot;&gt;improve our embedding story&lt;/a&gt; and prepare Servo for integration with &lt;a href=&quot;https://tauri.app/&quot;&gt;Tauri&lt;/a&gt;, starting with &lt;strong&gt;precompiled &lt;a href=&quot;https://en.wikipedia.org/wiki/ANGLE_(software)&quot;&gt;ANGLE&lt;/a&gt;&lt;/strong&gt; for faster initial builds (&lt;a href=&quot;https://github.com/atbrakhi&quot;&gt;@atbrakhi&lt;/a&gt;), better support for &lt;strong&gt;offscreen rendering&lt;/strong&gt; (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30767&quot;&gt;#30767&lt;/a&gt;), and support for &lt;strong&gt;multiple webviews&lt;/strong&gt; (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30648&quot;&gt;#30648&lt;/a&gt;).
These changes haven’t landed yet, but once they do, apps will be able to open, move, resize, and interleave Servo with other widgets.&lt;/p&gt;
&lt;figure class=&quot;_fig&quot;&gt;
&lt;div class=&quot;_flex&quot;&gt;
    &lt;a href=&quot;https://servo.org/aws/img/blog/servoshell-mdi.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/servoshell-mdi.png&quot; alt=&quot;servoshell with a multiple-document interface, showing three overlapping egui windows of different sizes inside a native window&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;figcaption&gt;
&lt;p&gt;A very early prototype of a Servo-based multiple-document interface (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30785&quot;&gt;#30785&lt;/a&gt;), taking advantage of upcoming embedding improvements to interleave Servo with &lt;a href=&quot;https://www.egui.rs/&quot;&gt;egui&lt;/a&gt; windows.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;floats-and-inline-layout&quot; tabindex=&quot;-1&quot;&gt;Floats and inline layout &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/#floats-and-inline-layout&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve made several improvements to Servo’s inline layout system, which handles the flow and wrapping of text, images, and inline blocks, delivering welcome bumps to our &lt;a href=&quot;https://servo.org/aws/blog/2023/07/20/servo-web-platform-tests/&quot;&gt;WPT&lt;/a&gt; pass rates (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/Loirooriol&quot;&gt;@Loirooriol&lt;/a&gt;, &lt;a href=&quot;https://github.com/mukilan&quot;&gt;@mukilan&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;61.4% in the CSS2 &lt;code&gt;linebox&lt;/code&gt; test suite (+2.8pp), with better handling of line heights and forced line breaks (&lt;a href=&quot;https://github.com/servo/servo/pull/30519&quot;&gt;#30519&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;78.9% in &lt;code&gt;floats&lt;/code&gt; (+1.0pp) and 73.3% in &lt;code&gt;floats-clear&lt;/code&gt; (+0.5pp), by allowing trailing whitespace to overlap with floats (&lt;a href=&quot;https://github.com/servo/servo/pull/30586&quot;&gt;#30586&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;78.1% in &lt;code&gt;normal-flow&lt;/code&gt; (+1.1pp), by fixing inlines split by boxes and paving the way for fragments that span boxes (&lt;a href=&quot;https://github.com/servo/servo/pull/30608&quot;&gt;#30608&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;82.2% in &lt;code&gt;floats&lt;/code&gt; (a further +3.3pp), by fixing the fragmentation of unbreakable fragments that span multiple boxes (&lt;a href=&quot;https://github.com/servo/servo/pull/30628&quot;&gt;#30628&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;css-updates&quot; tabindex=&quot;-1&quot;&gt;CSS updates &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/#css-updates&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Several components and dependencies have been upgraded, the biggest being &lt;strong&gt;Stylo&lt;/strong&gt;, our Rust-based CSS engine that is now part of Firefox.
We’ve caught up with upstream Stylo by 311 commits, bringing our CSS support from August 2022 to June 2023 (&lt;a href=&quot;https://github.com/Loirooriol&quot;&gt;@Loirooriol&lt;/a&gt;, &lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30646&quot;&gt;#30646&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30681&quot;&gt;#30681&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30692&quot;&gt;#30692&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30748&quot;&gt;#30748&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30770&quot;&gt;#30770&lt;/a&gt;), and bumped &lt;strong&gt;cssparser&lt;/strong&gt; to 0.31.2 (&lt;a href=&quot;https://github.com/Loirooriol&quot;&gt;@Loirooriol&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30771&quot;&gt;#30771&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As a result, Servo now passes 60.5% of the CSSOM test suite (+3.3pp).
We also no longer incorrectly transition properties that are inherently “discrete” (&lt;a href=&quot;https://github.com/Loirooriol&quot;&gt;@Loirooriol&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30565&quot;&gt;#30565&lt;/a&gt;), passing a further (net) 294 test cases.&lt;/p&gt;
&lt;p&gt;Thanks to the recent work on Stylo by Mozilla and others, Servo now supports &lt;strong&gt;color-mix()&lt;/strong&gt; and the &lt;strong&gt;new color spaces&lt;/strong&gt; from &lt;a href=&quot;https://drafts.csswg.org/css-color-4/&quot;&gt;CSS Color 4&lt;/a&gt; (&lt;a href=&quot;https://github.com/Loirooriol&quot;&gt;@Loirooriol&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30752&quot;&gt;#30752&lt;/a&gt;)!
These new color features allow authors to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select colors from wider gamuts than in sRGB (&lt;code&gt;display-p3&lt;/code&gt;, &lt;code&gt;a98-rgb&lt;/code&gt;, &lt;code&gt;prophoto-rgb&lt;/code&gt;, &lt;code&gt;rec2020&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;mix colors as if mixing intensities of colored light in real life (&lt;code&gt;srgb-linear&lt;/code&gt;, &lt;code&gt;xyz&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;select a variety of colors with consistent perceived lightness (&lt;code&gt;oklab&lt;/code&gt;, &lt;code&gt;lab&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;select colors with consistent perceived lightness and hue (&lt;code&gt;oklch&lt;/code&gt;, &lt;code&gt;lch&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;_fig&quot;&gt;
&lt;iframe src=&quot;https://bucket.daz.cat/work/igalia/servo/5.html&quot; id=&quot;_color_mix_demo&quot;&gt;&lt;/iframe&gt;
&lt;figcaption&gt;
&lt;p&gt;The results of mixing &lt;code&gt;lime&lt;/code&gt; and &lt;code&gt;blue&lt;/code&gt; in a variety of CSS color spaces, based on &lt;a href=&quot;https://codepen.io/web-dot-dev/full/MWBXVLV&quot;&gt;a demo&lt;/a&gt; from &lt;a href=&quot;https://developer.chrome.com/articles/css-color-mix/&quot;&gt;this post&lt;/a&gt;. The background color is the same as this blog post mixed with 10% white, or &lt;code&gt;color-mix(in oklch, #121619, white 10%)&lt;/code&gt;.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;dependency-upgrades&quot; tabindex=&quot;-1&quot;&gt;Dependency upgrades &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/#dependency-upgrades&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our upgrade efforts also affect the tooling Servo uses.
Servo now builds on Ubuntu 22.04 (&lt;a href=&quot;https://github.com/mukilan&quot;&gt;@mukilan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30162&quot;&gt;#30162&lt;/a&gt;) and macOS 13 on CI, which in turn has made upgrading LLVM and Python (for mach) more urgent.
As a result, we’ve started upgrading Python from 3.10 to 3.12 (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/mukilan&quot;&gt;@mukilan&lt;/a&gt;, &lt;a href=&quot;https://github.com/sagudev&quot;&gt;@sagudev&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30638&quot;&gt;#30638&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30645&quot;&gt;#30645&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30659&quot;&gt;#30659&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30685&quot;&gt;#30685&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But the biggest impact on our ability to keep our dependencies up to date comes from our &lt;strong&gt;Rust version&lt;/strong&gt;.
Many pre-version-1 libraries, even in our transitive dependencies, bump their &lt;abbr title=&quot;minimum supported Rust version&quot;&gt;MSRV&lt;/abbr&gt; quite aggressively, sometimes even requiring a nightly compiler.
First, we migrated from Rust nightly-2023-02-01 to nightly-03-18 (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30630&quot;&gt;#30630&lt;/a&gt;), which in turn allowed us to upgrade our network stack (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30612&quot;&gt;#30612&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30660&quot;&gt;#30660&lt;/a&gt;).
Since then, we’ve started eliminating our usage of unstable Rust features (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30745&quot;&gt;#30745&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30742&quot;&gt;#30742&lt;/a&gt;), which should make future Rust upgrades easier.&lt;/p&gt;
&lt;h2 id=&quot;pull-requests&quot; tabindex=&quot;-1&quot;&gt;Pull requests &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/#pull-requests&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;figure class=&quot;_figr&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/try-job-labels.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/try-job-labels.png&quot; alt=&quot;GitHub pull request label menu, with the new try job labels (T-full, T-linux-wpt-2013, T-linux-wpt-2020, T-macos, T-windows)&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&quot;_floatmin&quot;&gt;&lt;/span&gt;You can now &lt;strong&gt;run try jobs by adding labels&lt;/strong&gt; to your pull requests (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30383&quot;&gt;#30383&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30647&quot;&gt;#30647&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30650&quot;&gt;#30650&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30756&quot;&gt;#30756&lt;/a&gt;).
You can even add multiple labels!
The old method, where you mention &lt;a href=&quot;https://github.com/bors-servo&quot;&gt;@bors-servo&lt;/a&gt; in a comment, has been removed (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30712&quot;&gt;#30712&lt;/a&gt;), making your pull requests less likely to get spammed with job failures when you post comments on them.
For more details, see &lt;a href=&quot;https://github.com/servo/servo/blob/master/CONTRIBUTING.md&quot;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;stability&quot; tabindex=&quot;-1&quot;&gt;Stability &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/30/embedding-floats-color-mix/#stability&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We’ve fixed a panic when no font is found for a run of text, printing a warning instead (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30581&quot;&gt;#30581&lt;/a&gt;), as well as a panic when creating stacking contexts with zero scale (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30713&quot;&gt;#30713&lt;/a&gt;).
In general, Servo should never panic outside of debug assertions.&lt;/p&gt;
&lt;p&gt;We’ve also fixed a bug where paint worklets may access thread-local storage after a script thread gets destroyed (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30671&quot;&gt;#30671&lt;/a&gt;), which caused intermittent panics in 74 tests.&lt;/p&gt;
&lt;style&gt;
    /* guaranteed minimum width for first paragraph after a float */
    ._floatmin {
        display: block;
        width: 13em;
        overflow: hidden;
    }
    ._none {
        display: none;
    }
    ._fig:not(#specificity) {
        width: 33em;
        max-width: 100%;
        margin: 1em auto;
    }
    ._fig &gt; ._flex {
        display: flex;
    }
    ._fig._min {
        width: min-content;
    }
    ._fig table {
        text-align: initial;
    }
    ._fig figcaption._notes {
        text-align: left;
        width: max-content;
        max-width: 100%;
    }
    ._figl:not(#specificity),
    ._figr:not(#specificity) {
        margin: 0 1em 1em;
    }
    ._figl {
        float: left;
    }
    ._figr {
        float: right;
    }
    .figl &gt; iframe,
    .figr &gt; iframe,
    .figl &gt; a &gt; img,
    .figr &gt; a &gt; img {
        width: 17em;
        max-width: max-content;
    }
    ._runin {
        margin-bottom: 1em;
    }
    ._runin &gt; p,
    ._runin &gt; h2 {
        display: inline;
    }
    #_color_mix_demo {
        margin: 0 auto;
        display: block;
        height: min(calc(100vh - 9em), 400px);
        width: min(100%, 33em);
    }
    ._correction {
        max-width: 33em;
        margin: 1em auto;
        border-bottom: 1px solid;
        padding-bottom: 1em;
    }
&lt;/style&gt;
</content>
  </entry>
  <entry>
    <title>Servo announces grant from the NLnet Foundation</title>
    <link href="https://servo.org/aws/blog/2023/11/06/nlgrant-announcement/"/>
    <updated>2023-11-06T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/11/06/nlgrant-announcement/</id>
    <content xml:lang="en" type="html">&lt;p&gt;We are excited to announce that earlier this year in July, Servo received a &lt;strong&gt;&lt;a href=&quot;https://nlnet.nl/project/Servo/&quot;&gt;NLnet grant&lt;/a&gt;&lt;/strong&gt; to enhance several aspects of Servo. Under this grant, our primary focus is to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complete float support in Servo&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support more languages in inline layout&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Add initial &amp;lt;table&amp;gt; support&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;floats&quot; tabindex=&quot;-1&quot;&gt;Floats &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/06/nlgrant-announcement/#floats&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Supporting floats in Servo is an ongoing effort since mid-2023. We’ve made significant progress on floats, but there are still some issues that need to be addressed before Servo can boast a fully-compliant implementation of CSS floats.&lt;/p&gt;
&lt;p&gt;Our objective is to achieve an average pass rate of over 80% for &lt;code&gt;/css/CSS2/floats/&lt;/code&gt; and &lt;code&gt;/css/CSS2/floats-clear/&lt;/code&gt;. You can track the results on our &lt;strong&gt;&lt;a href=&quot;https://wpt.servo.org/&quot;&gt;WPT dashboard&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Last week, we surpassed this for the floats tests, with an 82.2% WPT pass rate:&lt;/p&gt;
&lt;img src=&quot;https://servo.org/aws/img/blog/floats-2023-11-06.png&quot; style=&quot;width: 60%; margin: 1em;&quot; alt=&quot;Image showing web platform test result for floats, that is 82.2%&quot; /&gt;
&lt;p&gt;We’re also nearing the milestone for floats-clear, currently at a 73.3% pass rate:&lt;/p&gt;
&lt;img src=&quot;https://servo.org/aws/img/blog/floats-clear-2023-11-06.png&quot; style=&quot;width: 60%; margin: 1em;&quot; alt=&quot;Image showing web platform test result for floats-clear, that is 73.3%&quot; /&gt;
&lt;h2 id=&quot;more-languages-in-inline-layout&quot; tabindex=&quot;-1&quot;&gt;More languages in inline layout &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/06/nlgrant-announcement/#more-languages-in-inline-layout&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Servo’s layout engine lacks crucial features for rendering languages that don’t use the Latin alphabet. This includes proper font selection, support for right-to-left scripts, and logical properties. Our aim is to improve Servo’s support for displaying a wider variety of content.&lt;/p&gt;
&lt;h2 id=&quot;initial-%3Ctable%3E-support&quot; tabindex=&quot;-1&quot;&gt;Initial &amp;lt;table&amp;gt; support &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/11/06/nlgrant-announcement/#initial-%3Ctable%3E-support&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;HTML tables are an important and widely used feature. Servo’s new layout engine doesn’t support tables yet, which leads to incorrect layout of many web pages. Under this scope, our main focus is to implement initial support for tables in Servo, so that it can render tables used on Wikipedia.&lt;/p&gt;
&lt;p&gt;As we progress and achieve these milestones, we’ll cover them in more detail in subsequent blog posts. Stay tuned for more updates!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>This month in Servo: CSS filters, testing changes, Tauri, and more!</title>
    <link href="https://servo.org/aws/blog/2023/10/26/css-filters-testing-tauri/"/>
    <updated>2023-10-26T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/10/26/css-filters-testing-tauri/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Servo has had some exciting changes land in our nightly builds over the last month:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as of 2023-09-23, &lt;strong&gt;‘@media (resolution)’&lt;/strong&gt; queries are now supported (&lt;a href=&quot;https://github.com/sagudev&quot;&gt;@sagudev&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30406&quot;&gt;#30406&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-09-28, the &lt;strong&gt;‘dir’ attribute getter&lt;/strong&gt; now behaves correctly (&lt;a href=&quot;https://github.com/EnnuiL&quot;&gt;@EnnuiL&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30435&quot;&gt;#30435&lt;/a&gt;)
&lt;ul&gt;
&lt;li&gt;this fixes &lt;strong&gt;over 12000 subtests&lt;/strong&gt; in the HTML test suite!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    /* guaranteed minimum width for first paragraph after a float */
    ._floatmin {
        display: block;
        width: 13em;
        overflow: hidden;
    }
    ._none {
        display: none;
    }
    ._fig:not(#specificity) {
        width: 33em;
        max-width: 100%;
        margin: 1em auto;
    }
    ._fig &gt; ._flex {
        display: flex;
    }
    ._fig._min {
        width: min-content;
    }
    ._fig table {
        text-align: initial;
    }
    ._fig figcaption._notes {
        text-align: left;
        width: max-content;
        max-width: 100%;
    }
    ._figl:not(#specificity),
    ._figr:not(#specificity) {
        margin: 0 1em 1em;
    }
    ._figl {
        float: left;
    }
    ._figr {
        float: right;
    }
    .figl &gt; a &gt; img,
    .figr &gt; a &gt; img {
        width: 17em;
        max-width: max-content;
    }
    ._runin {
        margin-bottom: 1em;
    }
    ._runin &gt; p,
    ._runin &gt; h2 {
        display: inline;
    }
&lt;/style&gt;
&lt;p&gt;Much of the recent work on Servo has been around upgrading the components we share with Firefox:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SpiderMonkey&lt;/strong&gt; — upgraded from 107 to 115 (&lt;a href=&quot;https://github.com/sagudev&quot;&gt;@sagudev&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/mozjs/pull/408&quot;&gt;mozjs#408&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30379&quot;&gt;#30379&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stylo&lt;/strong&gt; — upgrade continues, with another 65 commits now landed in Servo (&lt;a href=&quot;https://github.com/Loirooriol&quot;&gt;@Loirooriol&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30421&quot;&gt;#30421&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebRender&lt;/strong&gt; — upgraded to &lt;a href=&quot;https://github.com/servo/servo/pull/30323&quot;&gt;May 2021&lt;/a&gt;, now fixing regressions and preparing for more breaking changes:
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;_none&quot;&gt;as of 2023-09-19,&lt;/span&gt; we’ve fixed a scrolling regression in &lt;strong&gt;Acid2&lt;/strong&gt; and other quirks mode pages (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30375&quot;&gt;#30375&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;_none&quot;&gt;as of 2023-09-21,&lt;/span&gt; we’ve fixed a major &lt;strong&gt;WebGL&lt;/strong&gt; regression related to tile cache invalidation (&lt;a href=&quot;https://github.com/mukilan&quot;&gt;@mukilan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30390&quot;&gt;#30390&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;span class=&quot;_none&quot;&gt;as of 2023-10-04,&lt;/span&gt; pinch zoom is now handled in Servo, preparing us for its removal from WebRender (&lt;a href=&quot;https://github.com/mrobinson&quot;&gt;@mrobinson&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30446&quot;&gt;#30446&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30459&quot;&gt;#30459&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes the best source of ideas for improving Servo is to focus on a real-world app.
&lt;a href=&quot;https://github.com/EnnuiL&quot;&gt;Ennui @EnnuiL&lt;/a&gt; is doing exactly that with &lt;a href=&quot;https://orteil.dashnet.org/cookieclicker/&quot;&gt;Cookie Clicker&lt;/a&gt;, a 2013 idle game that relies on CSS positioning, transitions, transforms, filters, and 2D canvases.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as of 2023-10-05, the &lt;strong&gt;CSS ‘drop-shadow()’ filter&lt;/strong&gt; is now supported (&lt;a href=&quot;https://github.com/EnnuiL&quot;&gt;@EnnuiL&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30439&quot;&gt;#30439&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-10-10, CSS filters are now correctly &lt;strong&gt;clipped by ‘overflow: hidden’&lt;/strong&gt; (&lt;a href=&quot;https://github.com/EnnuiL&quot;&gt;@EnnuiL&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30517&quot;&gt;#30517&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-10-19, &lt;strong&gt;drawImage()&lt;/strong&gt; on a 2D canvas now uses shared memory for performance (&lt;a href=&quot;https://github.com/EnnuiL&quot;&gt;@EnnuiL&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30544&quot;&gt;#30544&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;her work continues in &lt;a href=&quot;https://github.com/servo/servo/issues/30535&quot;&gt;#30535&lt;/a&gt;, with an analysis of Servo’s performance issues under Cookie Clicker&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;_fig&quot;&gt;
    &lt;div class=&quot;_flex&quot;&gt;
        &lt;a href=&quot;https://servo.org/aws/img/blog/drop-shadow-filter-before.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/drop-shadow-filter-before.png&quot; alt=&quot;Cookie Clicker on Servo 2023-10-04, without the drop-shadow() filter&quot; /&gt;&lt;/a&gt;
        &lt;a href=&quot;https://servo.org/aws/img/blog/drop-shadow-filter-after.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/drop-shadow-filter-after.png&quot; alt=&quot;Cookie Clicker on Servo 2023-10-05, now with the drop-shadow() filter&quot; /&gt;&lt;/a&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;
        left: Cookie Clicker as of 2023-10-04
        &lt;br /&gt;right: Cookie Clicker as of 2023-10-05
    &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class=&quot;_runin&quot;&gt;&lt;p&gt;&lt;span class=&quot;_floatmin&quot;&gt;&lt;/span&gt;There have also been some changes to our internals that affect &lt;/p&gt;&lt;h2&gt;contributing to Servo&lt;/h2&gt;&lt;p&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Debug assertions&lt;/strong&gt; are now enabled everywhere except for official nightly releases (&lt;a href=&quot;https://github.com/delan&quot;&gt;@delan&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30509&quot;&gt;#30509&lt;/a&gt;).
This includes both debug (&lt;code&gt;-d --dev&lt;/code&gt;) and release (&lt;code&gt;-r --release&lt;/code&gt;) builds locally, as well as try jobs and most other builds on CI.
For more details, see &lt;a href=&quot;https://github.com/servo/servo/blob/a3d2f0c586e97e26906bd2327395186bf140f49b/docs/HACKING_QUICKSTART.md#building-servo&quot;&gt;HACKING_QUICKSTART.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With debug assertions enabled, you can use &lt;a href=&quot;https://doc.rust-lang.org/std/macro.debug_assert.html&quot;&gt;debug_assert!()&lt;/a&gt; to panic when an invariant is violated, much like you would use &lt;a href=&quot;https://source.chromium.org/chromium/chromium/src/+/main:base/check.h;drc=95330f60656455a82d816e24907ed67b99cb8720&quot;&gt;DCHECK()&lt;/a&gt; in Chromium, or for more complex checks, you can wrap code in &lt;code&gt;#[cfg(debug_assertions)]&lt;/code&gt; or &lt;code&gt;if cfg!(debug_assertions) {}&lt;/code&gt;.
Note that panicking in official releases — where &lt;code&gt;cfg!(debug_assertions)&lt;/code&gt; is false — is still verboten in general, and those panics should almost always warn and/or gracefully recover instead.&lt;/p&gt;
&lt;div class=&quot;_runin&quot; style=&quot;clear: both;&quot;&gt;&lt;p&gt;Servo has long aimed to become an &lt;/p&gt;&lt;h2 id=&quot;embeddable-web-engine&quot;&gt;embeddable web engine&lt;/h2&gt;&lt;p&gt;, and our next step on this journey will be supported by a grant from &lt;a href=&quot;https://nlnet.nl/project/Tauri-Servo/&quot;&gt;NLNet&lt;/a&gt;!
Over the next few months, we will be collaborating with the developers of &lt;a href=&quot;https://tauri.app/&quot;&gt;Tauri&lt;/a&gt; to make Servo available as a webview backend.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Tauri is a framework for building desktop apps that combine a web frontend with a Rust backend, and work is already ongoing to expand it to mobile apps and other backend languages.
But unlike say, Electron or React Native, Tauri is both frontend-agnostic and engine-agnostic, allowing you to use any frontend tooling you like and whichever web engine makes the most sense for your users.&lt;/p&gt;
&lt;p&gt;At the moment, Tauri supports webkit2gtk (WebKit) on Linux, WebView2 (Chromium) on Windows, and WKWebView (WebKit) on macOS and iOS, in each case leveraging the system webview where possible.
With this project to add support for Servo in Tauri, we hope to make embedding Servo easier than ever.&lt;/p&gt;
&lt;p&gt;For more details, subscribe to our tracking issue &lt;a href=&quot;https://github.com/servo/servo/issues/30593&quot;&gt;#30593&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;_runin&quot;&gt;&lt;p&gt;This was a big month for Servo at &lt;/p&gt;&lt;h2&gt;conferences and events&lt;/h2&gt;&lt;p&gt; too! You can catch up on our recent talks here:&lt;/p&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;on 18 September, &lt;a href=&quot;https://www.youtube.com/watch?v=J4qedc-0pjs&amp;amp;t=2356s&quot;&gt;&lt;strong&gt;Servo project update&lt;/strong&gt;&lt;/a&gt;, by Manuel Rego at &lt;a href=&quot;https://lfeuropems2023.sched.com/event/1PCHu&quot;&gt;LF Europe Member Summit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on 21 September, &lt;a href=&quot;https://www.youtube.com/watch?v=9lkIX5ryZZ4&quot;&gt;&lt;strong&gt;Servo Web Rendering Engine Reboot&lt;/strong&gt;&lt;/a&gt;, by Manuel Rego at &lt;a href=&quot;https://osseu2023.sched.com/event/1OGkc&quot;&gt;Open Source Summit Europe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on 24 September, &lt;a href=&quot;https://www.bilibili.com/video/BV1Hw411r7Q6/&quot;&gt;&lt;strong&gt;You can work on the web platform!&lt;/strong&gt;&lt;/a&gt;, by Martin Robinson at &lt;a href=&quot;https://workshop2023.gosim.org/schedule#mobile&quot;&gt;GOSIM workshop 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on 26 September, &lt;strong&gt;Servo: a web view from somewhere else&lt;/strong&gt; (video pending), by Martin Robinson at &lt;a href=&quot;https://conference2023.gosim.org/schedule#mobile&quot;&gt;GOSIM conference 2023&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on 17 October, &lt;a href=&quot;https://servo.org/slides/2023-10-17-eclipsecon/&quot;&gt;&lt;strong&gt;Servo&lt;/strong&gt;&lt;/a&gt;, by Rakhi Sharma at &lt;a href=&quot;https://www.eclipsecon.org/2023/&quot;&gt;EclipseCon 2023&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>This month in Servo: upcoming events, new browser UI, and more!</title>
    <link href="https://servo.org/aws/blog/2023/09/15/upcoming-events-and-new-browser-ui/"/>
    <updated>2023-09-15T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/09/15/upcoming-events-and-new-browser-ui/</id>
    <content xml:lang="en" type="html">&lt;p&gt;Servo has had some exciting changes land in our nightly builds over the last month:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;as of 2023-08-09, we now use &lt;strong&gt;rustls&lt;/strong&gt; instead of OpenSSL (&lt;a href=&quot;https://github.com/servo/servo/pull/30025&quot;&gt;#30025&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-08-21, our experimental &lt;strong&gt;WebGPU&lt;/strong&gt; support was updated (&lt;a href=&quot;https://github.com/servo/servo/pull/29795&quot;&gt;#29795&lt;/a&gt;, &lt;a href=&quot;https://github.com/servo/servo/pull/30359&quot;&gt;#30359&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-08-26, we can now build on &lt;strong&gt;ARM32&lt;/strong&gt; in addition to ARM64 (&lt;a href=&quot;https://github.com/servo/servo/pull/30204&quot;&gt;#30204&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-09-01, CSS &lt;strong&gt;floats&lt;/strong&gt; are now supported again (&lt;a href=&quot;https://github.com/servo/servo/pull/30243&quot;&gt;#30243&lt;/a&gt; et al)&lt;/li&gt;
&lt;li&gt;as of 2023-09-05, &lt;strong&gt;‘white-space: nowrap’&lt;/strong&gt; is now supported again (&lt;a href=&quot;https://github.com/servo/servo/pull/30259&quot;&gt;#30259&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-09-07, we have an improved &lt;strong&gt;crash error page&lt;/strong&gt; (&lt;a href=&quot;https://github.com/servo/servo/pull/30290&quot;&gt;#30290&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;as of 2023-09-15, our &lt;strong&gt;new browser UI&lt;/strong&gt; is enabled by default (&lt;a href=&quot;https://github.com/servo/servo/issues/30049&quot;&gt;#30049&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;style&gt;
    /* guaranteed minimum width for first paragraph after a float */
    ._floatmin {
        display: block;
        width: 13em;
        overflow: hidden;
    }
    .figl:not(#specificity),
    .figr:not(#specificity) {
        margin: 0 1em 1em;
    }
    .figl {
        float: left;
    }
    .figr {
        float: right;
    }
    .figl &gt; a &gt; img,
    .figr &gt; a &gt; img {
        width: 17em;
        max-width: max-content;
    }
    .figw &gt; a &gt; img {
        width: 33em;
        max-width: 100%;
    }
&lt;/style&gt;
&lt;figure class=&quot;figr&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/webgpu-game-of-life.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/webgpu-game-of-life.png&quot; alt=&quot;WebGPU game of life, showing a 32x32 grid where the living cells are shaded with a rainbow texture&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;&lt;span class=&quot;_floatmin&quot;&gt;&lt;/span&gt;While our &lt;strong&gt;WebGPU&lt;/strong&gt; support is still very much experimental (&lt;code&gt;--pref dom.webgpu.enabled&lt;/code&gt;), it now passes over 5000 more tests in the &lt;a href=&quot;https://github.com/gpuweb/cts&quot;&gt;Conformance Test Suite&lt;/a&gt;, after an upgrade from wgpu 0.6 (2020) to 0.16 (2023) and the addition of GPUSupportedFeatures. A few WebGPU demos now run too, notably those that don’t require &lt;a href=&quot;https://github.com/servo/servo/blob/0b86d6579823d0786b37cee86eaaf3ce6bd8aa7d/components/script/dom/htmlcanvaselement.rs#L98-L110&quot;&gt;changing the width or height on the fly&lt;/a&gt;, such as the &lt;a href=&quot;https://sagudev.github.io/briefcase/first-webgpu/9-endgame.html&quot;&gt;Conway’s Game of Life&lt;/a&gt; built in &lt;a href=&quot;https://codelabs.developers.google.com/your-first-webgpu-app&quot;&gt;Your first WebGPU app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Both of these were contributed by &lt;a href=&quot;https://github.com/sagudev&quot;&gt;Samson @sagudev&lt;/a&gt;, who has also done a lot of work on our DOM bindings, SpiderMonkey integration, and CI workflows, and we’re pleased to now have them join Servo as a reviewer too!&lt;/p&gt;
&lt;figure class=&quot;figl&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/floats-wikipedia.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/floats-wikipedia.png&quot; alt=&quot;Wikipedia article for Servo, showing article text flowing around the floating infobox on the right&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;On the CSS front, &lt;strong&gt;floats&lt;/strong&gt; and &lt;strong&gt;‘white-space: nowrap’&lt;/strong&gt; were previously only supported in our legacy layout engine (&lt;code&gt;--legacy-layout&lt;/code&gt;), but now they are supported again, and better than ever before! Floats in particular are one of the trickiest parts of CSS2, and our legacy version had many bugs that were essentially unfixable due to the &lt;a href=&quot;https://servo.org/aws/blog/2023/04/13/layout-2013-vs-2020/&quot;&gt;legacy layout architecture&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes Servo crashes due to bugs or unimplemented features, and Rust helps us ensure that they almost always happen &lt;em&gt;safely&lt;/em&gt; by panicking, but there’s still a lot we can do to improve the user experience while surfacing those panics, especially on platforms without stdio like Windows.&lt;/p&gt;
&lt;p&gt;Our new &lt;strong&gt;crash error page&lt;/strong&gt; shows the panic message and stack trace, instead of a confusing “unexpected scheme” error, and allows the user to reload the page. Note that not all crashes are handled gracefully yet — more work is needed to allow recovery from crashes in style and layout.&lt;/p&gt;
&lt;figure class=&quot;figw&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/crash-error-page.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/crash-error-page.png&quot; alt=&quot;Servo’s new crash error page, showing a fake panic!() inserted at the start of Document::Write&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;p&gt;Servo’s example browser — the nightly version of Servo you can download and run — now has a location bar! This &lt;strong&gt;new browser UI&lt;/strong&gt;, or “minibrowser” mode, is now enabled by default, though you can disable it with &lt;code&gt;--no-minibrowser&lt;/code&gt; if you run into any problems. See also &lt;a href=&quot;https://github.com/servo/servo/issues/30049&quot;&gt;#30049&lt;/a&gt; for known issues with the minibrowser.&lt;/p&gt;
&lt;figure class=&quot;figw&quot;&gt;&lt;a href=&quot;https://servo.org/aws/img/blog/new-browser-ui.png&quot;&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/new-browser-ui.png&quot; alt=&quot;Servo’s new browser UI, showing a toolbar with a location field and go button&quot; /&gt;&lt;/a&gt;&lt;/figure&gt;
&lt;h3 id=&quot;upcoming-events&quot; tabindex=&quot;-1&quot;&gt;Upcoming events &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/09/15/upcoming-events-and-new-browser-ui/#upcoming-events&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;September is also a big month for Servo as a project! We have &lt;a href=&quot;https://linuxfoundation.eu/newsroom/servo-web-rendering-engine-joins-linux-foundation-europe&quot;&gt;joined Linux Foundation Europe&lt;/a&gt;, and we’re also attending several events in Bilbao, Spain, and Shanghai, China.&lt;/p&gt;
&lt;p&gt;Servo will be at the &lt;a href=&quot;https://events.linuxfoundation.org/lf-europe-member-summit/program/schedule/&quot;&gt;LF Europe Member Summit&lt;/a&gt; in Bilbao, with a &lt;a href=&quot;https://lfeuropems2023.sched.com/event/1PCHu&quot;&gt;brief project update&lt;/a&gt; on &lt;strong&gt;18 September&lt;/strong&gt; at &lt;strong&gt;10:45 local time&lt;/strong&gt; (08:45 UTC), and the &lt;a href=&quot;https://events.linuxfoundation.org/open-source-summit-europe/&quot;&gt;Open Source Summit Europe&lt;/a&gt;, with Manuel Rego &lt;a href=&quot;https://osseu2023.sched.com/event/1OGkc&quot;&gt;speaking about Servo&lt;/a&gt; on &lt;strong&gt;21 September&lt;/strong&gt; at &lt;strong&gt;11:55 local time&lt;/strong&gt; (09:55 UTC).&lt;/p&gt;
&lt;p&gt;At both events, we will also have a booth where you can play with Servo on a real device and ask us questions about the project, all day from &lt;strong&gt;18 September&lt;/strong&gt; through &lt;strong&gt;21 September&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The following week, you can find us at the &lt;a href=&quot;https://www.gosim.org/#events&quot;&gt;GOSIM&lt;/a&gt; &lt;a href=&quot;https://workshop2023.gosim.org/&quot;&gt;workshop&lt;/a&gt; and &lt;a href=&quot;https://conference2023.gosim.org/&quot;&gt;conference&lt;/a&gt; in Shanghai, with Martin Robinson presenting one workshop and one talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://workshop2023.gosim.org/schedule#mobile&quot;&gt;&lt;strong&gt;You can work on the web platform!&lt;/strong&gt;&lt;/a&gt; — an introduction to hacking on Servo, on &lt;strong&gt;24 September&lt;/strong&gt; at &lt;strong&gt;13:45 local time&lt;/strong&gt; (05:45 UTC)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://conference2023.gosim.org/schedule#mobile&quot;&gt;&lt;strong&gt;Servo: a web view from somewhere else&lt;/strong&gt;&lt;/a&gt; — a case for embeddable web engine diversity and Servo’s role in improving that, on &lt;strong&gt;26 September&lt;/strong&gt; at &lt;strong&gt;14:45 local time&lt;/strong&gt; (06:45 UTC)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Servo and the Web Platform Tests</title>
    <link href="https://servo.org/aws/blog/2023/07/20/servo-web-platform-tests/"/>
    <updated>2023-07-20T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/07/20/servo-web-platform-tests/</id>
    <content xml:lang="en" type="html">&lt;p&gt;With over 52000 tests and nearly two million subtests, the &lt;a href=&quot;https://web-platform-tests.org/&quot;&gt;Web Platform Tests&lt;/a&gt; are one of the most important parts of the web’s interoperability and compatibility story. Servo has long used the WPT to catch regressions and &lt;a href=&quot;https://servo.org/blog/2023/03/16/making-easier-to-contribute/&quot;&gt;flakiness&lt;/a&gt;, but the suite has also played a role in our &lt;a href=&quot;https://servo.org/blog/2023/04/13/layout-2013-vs-2020/&quot;&gt;layout engine migration&lt;/a&gt; and guiding our way towards CSS2 conformance.&lt;/p&gt;
&lt;style&gt;
    ._runin {
        margin-bottom: 1em;
    }
    ._runin &gt; p,
    ._runin &gt; h2 {
        display: inline;
    }
&lt;/style&gt;
&lt;div class=&quot;_runin&quot;&gt;&lt;p&gt;You can find Servo on &lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://wpt.fyi/&quot;&gt;wpt.fyi&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;, a dashboard for all browsers integrated with the Web Platform Tests.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;To see the pass rates for Servo, follow &lt;a href=&quot;https://wpt.fyi/results/?label=master&amp;amp;label=experimental&amp;amp;product=servo&quot;&gt;this direct link&lt;/a&gt;, or click &lt;span style=&quot;font-size: 87.5%;&quot;&gt;EDIT&lt;/span&gt;, &lt;span style=&quot;font-size: 87.5%;&quot;&gt;ADD PRODUCT&lt;/span&gt;, choose Servo, then click &lt;span style=&quot;font-size: 87.5%;&quot;&gt;SUBMIT&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;While fyi is not so great for tracking progress over time (though definitely &lt;a href=&quot;https://wpt.fyi/runs?label=master&amp;amp;product=servo&quot;&gt;possible&lt;/a&gt;), it has been very helpful for drilling down from specs to sections, tests, and subtests. This has made it easier for us to decide what to work on next.&lt;/p&gt;
&lt;div class=&quot;_runin&quot;&gt;&lt;p&gt;But the key to this was our &lt;/p&gt;&lt;h2&gt;&lt;a href=&quot;https://wpt.servo.org/&quot;&gt;Servo WPT dashboard&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;The full dashboard can be found at &lt;a href=&quot;https://wpt.servo.org/&quot;&gt;wpt.servo.org&lt;/a&gt;, and there’s a simplified version &lt;a href=&quot;https://servo.org/about/#wpt-pass-rates&quot;&gt;on our about page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Built in April, the dashboard has since tracked Servo’s pass rate over time, not just over the suite as a whole but also over several &lt;em&gt;focus areas&lt;/em&gt;:&lt;/p&gt;
&lt;table style=&quot;width: auto;&quot;&gt;
&lt;tr&gt;
&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;CSS overall
    &lt;ul&gt;
    &lt;li&gt;our CSS2 focus areas →
    &lt;/li&gt;&lt;li&gt;CSS position module
    &lt;/li&gt;&lt;li&gt;CSS flexbox module
    &lt;/li&gt;&lt;li&gt;CSSOM
    &lt;/li&gt;&lt;/ul&gt;
&lt;/li&gt;&lt;/ul&gt;
&lt;/td&gt;&lt;td&gt;
&lt;ul&gt;
&lt;li&gt;abspos
&lt;/li&gt;&lt;li&gt;box-display
&lt;/li&gt;&lt;li&gt;floats
&lt;/li&gt;&lt;li&gt;floats-clear
&lt;/li&gt;&lt;li&gt;linebox
&lt;/li&gt;&lt;li&gt;margin-padding-clear
&lt;/li&gt;&lt;li&gt;normal-flow
&lt;/li&gt;&lt;li&gt;positioning
&lt;/li&gt;&lt;/ul&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;p&gt;The dashboard has data for both our &lt;a href=&quot;https://servo.org/blog/2023/04/13/layout-2013-vs-2020/&quot;&gt;legacy and new layout engines&lt;/a&gt;, which made it easy to see where the new engine most needed catching up.&lt;/p&gt;
&lt;p&gt;Over the last three months, we’ve halved the gap with legacy or better in several of those areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS overall (7.7pp → 3.7pp)&lt;/li&gt;
&lt;li&gt;our CSS2 focus areas (19.0pp → 8.2pp)&lt;/li&gt;
&lt;li&gt;margin-padding-clear (33.0pp → 10.3pp)&lt;/li&gt;
&lt;li&gt;CSS flexbox module (10.5pp → 3.1pp)&lt;/li&gt;
&lt;li&gt;CSS position module (2.5pp → 0.2pp(!))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re two thirds of the way to legacy in floats (31.5pp → 10.8pp) and floats-clear (48.3pp → 3.3pp(!)):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/wpt-dashboard-floats.png&quot; alt=&quot;floats: 18 (legacy 50) on 1 april, 23 (legacy 52) on 15 june, 33 on 17 june, 37 (legacy 53) on 18 july, 42 on 19 july&quot; style=&quot;width: 50%;&quot; /&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/wpt-dashboard-floats-clear.png&quot; alt=&quot;floats-clear: 18 (legacy 66) on 1 april, 20 (legacy 67) on 15 june, 51 on 16 june, 57 on 22 june, 63 on 1 july, 64 on 20 july&quot; style=&quot;width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And in the CSS2 positioning tests, we’ve surpassed legacy and built a healthy 5.5pp lead:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/wpt-dashboard-positioning.png&quot; alt=&quot;positioning: 77.7 (legacy 80.9) on 1 april, 81.7 (legacy 81.1) on 13 april, 85.7 on 1 july, 86.6 on 20 july&quot; style=&quot;width: 50%;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Over time, as our pass rates improve or people start working on new things, we’ll continue &lt;a href=&quot;https://github.com/servo/internal-wpt-dashboard/blob/461c573885c17f42687fb26131fe8ccd4213b826/process-wpt-results.js&quot;&gt;adding new focus areas&lt;/a&gt;, and with the web platform continuously evolving, we probably won’t run out of areas any time soon.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Conference news</title>
    <link href="https://servo.org/aws/blog/2023/06/19/conference-news/"/>
    <updated>2023-06-19T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/06/19/conference-news/</id>
    <content xml:lang="en" type="html">&lt;p&gt;In May of 2023, Martin Robinson from the Servo project team had the chance to participate in the &lt;a href=&quot;https://2023.rustnl.org/&quot;&gt;&lt;strong&gt;RustNL 2023&lt;/strong&gt;&lt;/a&gt; conference in Amsterdam. There he gave a &lt;a href=&quot;https://www.youtube.com/watch?v=IdHvHoAO5oo&quot;&gt;lighting talk about the Servo project&lt;/a&gt; and its current plans. In addition, he participated in some follow up discussions exploring the possibility of using Servo in various Rust application frameworks.&lt;/p&gt;
&lt;p&gt;In the first week of June 2023, the Servo project team participated in the &lt;a href=&quot;https://webengineshackfest.org/2023/&quot;&gt;&lt;strong&gt;Web Engines Hackfest 2023&lt;/strong&gt;&lt;/a&gt;. Delan Azabani gave a &lt;a href=&quot;https://www.youtube.com/watch?v=pfk8s5OD99A&quot;&gt;talk about the Servo project&lt;/a&gt;, diving into the details of the team’s work in the first half of the year and its plans for the second half. The talk provided some valuable insights into running some Servo &lt;a href=&quot;https://demo.servo.org/&quot;&gt;demos&lt;/a&gt; as well as the status of floats and the evolution of the layout system. In addition, there were some engaging discussions around the future of the shared style crate in Gecko and Servo.&lt;/p&gt;
&lt;p&gt;At the same event there was also a &lt;a href=&quot;https://github.com/Igalia/webengineshackfest/issues/16&quot;&gt;breakout session about Servo&lt;/a&gt; where various topics were addressed, such how to coordinate development efforts between Mozilla and Gecko on the shared webrender and style crates. Of particular interest was the implementation and challenges of a new embedding API for Servo. Lastly, there was a discussion about simplifying the contribution process to the Servo project, with a focus on making it more beginner-friendly and enabling a broader participation from interested individuals. You can find the &lt;a href=&quot;https://github.com/Igalia/webengineshackfest/wiki/2023-Servo&quot;&gt;session notes online&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Around the end of  June, Servo will attend the &lt;a href=&quot;https://events.linuxfoundation.org/embedded-open-source-summit/&quot;&gt;&lt;strong&gt;Embedded Open Source Summit&lt;/strong&gt;&lt;/a&gt; in Prague. If you are participating in this event, feel free to &lt;a href=&quot;mailto:info@servo.org&quot;&gt;contact us&lt;/a&gt; with any questions about the project status and our plans for the future.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Adding support for ‘outline’ properties</title>
    <link href="https://servo.org/aws/blog/2023/05/31/adding-support-for-outline-properties/"/>
    <updated>2023-05-31T00:00:00Z</updated>
    <id>https://servo.org/aws/blog/2023/05/31/adding-support-for-outline-properties/</id>
    <content xml:lang="en" type="html">&lt;p&gt;As mentioned in &lt;a href=&quot;https://servo.org/blog/2023/04/13/layout-2013-vs-2020/&quot;&gt;our last blog post&lt;/a&gt;, we’re currently working on selecting a layout engine for Servo between the original Layout 2013 and the newer Layout 2020.&lt;/p&gt;
&lt;p&gt;Our plan has been to start by implementing some small features in Layout 2020, to help us decide whether to switch to the new layout engine, and in turn tackle more complex features like floats. One of these features was ‘outline’, which is now supported in the new engine.&lt;/p&gt;
&lt;p&gt;A few days ago, we landed support for ‘outline’ and ‘outline-offset’. These properties are now fully supported in Servo, with two minor caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/servo/servo/pull/29718&quot;&gt;Snap border and outline widths at computed-value time&lt;/a&gt; — this is blocked on a Stylo upgrade to avoid diverging from Firefox&lt;/li&gt;
&lt;li&gt;The ‘outline-style’ value ‘auto’ currently works like ‘solid’ — this is allowed by the spec, but we may be able to do something better here, like rounding the corners of the outline or matching the platform style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The impact of this feature is most noticeable in the focus styles for links and input fields. For example, the User Agent stylesheet already applies ‘outline: thin dotted’ to ‘a:focus’, so clicking the first link in&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;Lorem ipsum &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;dolor sit amet&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;,
consectetur &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;adipiscing elit&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now yields&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/servo-outline.png&quot; alt=&quot;Text with two links where the first one is focused so it has a thin outline around it&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;implementation&quot; tabindex=&quot;-1&quot;&gt;Implementation &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/05/31/adding-support-for-outline-properties/#implementation&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The bulk of the feature was implemented in &lt;a href=&quot;https://github.com/servo/servo/pull/29695&quot;&gt;#29695&lt;/a&gt; (‘outline’) and &lt;a href=&quot;https://github.com/servo/servo/pull/29702&quot;&gt;#29702&lt;/a&gt; (‘outline-offset’):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In &lt;code&gt;{longhands,shorthands}/outline.mako.rs&lt;/code&gt;, we enable ‘outline-offset’, ‘outline-color’, and ‘outline’ in Layout 2020, and remove the pref gates for ‘outline-style’ and ‘outline-width’, allowing those properties to be resolved and queried&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;BoxFragment::build_stacking_context_tree_for_children&lt;/code&gt;, we check ‘outline-width’ and (if non-zero) push a &lt;code&gt;StackingContextFragment&lt;/code&gt; to remind ourselves to paint an outline for the box fragment when building its display list&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;StackingContext::build_display_list&lt;/code&gt;, we search for those reminders and paint the necessary outlines, but only after all other kinds of content in the stacking context (“out-of-band”)&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;BuilderForBoxFragment::build&lt;/code&gt;, we now need to handle requests to paint the &lt;code&gt;Outline&lt;/code&gt;, not just the &lt;code&gt;BlockBackgroundsAndBorders&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;BuilderForBoxFragment::build_outline&lt;/code&gt;, we paint the outline by creating a &lt;code&gt;BorderDisplayItem&lt;/code&gt; in WebRender, while taking the ‘outline-offset’ into account&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We also improved the shorthand serialisation in &lt;a href=&quot;https://github.com/servo/servo/pull/29708&quot;&gt;#29708&lt;/a&gt;, by replacing the &lt;code&gt;#[derive(ToCss)]&lt;/code&gt; for ‘outline’ with a custom impl that returns ‘auto’ in the case where all of the longhands are set to initial values.&lt;/p&gt;
&lt;h2 id=&quot;tests-and-spec-issues&quot; tabindex=&quot;-1&quot;&gt;Tests and spec issues &lt;a class=&quot;header-anchor&quot; href=&quot;https://servo.org/aws/blog/2023/05/31/adding-support-for-outline-properties/#tests-and-spec-issues&quot;&gt;
        &lt;span class=&quot;icon hashlink&quot;&gt;&lt;i class=&quot;fas fa-link&quot;&gt;&lt;/i&gt;&lt;/span&gt;
      &lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The spec allows outlines to be painted either &lt;a href=&quot;https://drafts.csswg.org/css-position-4/#in-band-outline&quot;&gt;in-band&lt;/a&gt;, such that other elements can obscure them, or &lt;a href=&quot;https://drafts.csswg.org/css-position-4/#out-of-band-outline&quot;&gt;out-of-band&lt;/a&gt;, on top of all other content in the stacking context. We chose the latter, because it’s the recommended approach for accessibility and matches other browsers.&lt;/p&gt;
&lt;p&gt;For example, the magenta element below overlaps the blue border of the previous element, but not the out-of-band cyan outline:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;
    outline: 5px solid cyan;
    border: 5px solid blue;
&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Lorem ipsum&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token special-attr&quot;&gt;&lt;span class=&quot;token attr-name&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;
    background: magenta;
    margin-top: -15px;
    width: 50px;
    height: 50px;
&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://servo.org/aws/img/blog/servo-outline-painting.png&quot; alt=&quot;Painting order is blue border, then magenta background, then “Lorem ipsum” and cyan outline&quot; /&gt;&lt;/p&gt;
&lt;p&gt;‘outline’ already has good test coverage, though during our implementation we added &lt;a href=&quot;https://github.com/servo/servo/pull/29686&quot;&gt;one new test&lt;/a&gt; to check that ‘background-clip’ works as expected with ‘border-radius’, which affects both borders and outlines in Servo.&lt;/p&gt;
&lt;p&gt;We’ve also filed two spec issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8786&quot;&gt;Negative outline-offset is not interoperable and spec is not clear&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/w3c/csswg-drafts/issues/8788&quot;&gt;Should outline-offset be a longhand of outline?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As always, despite ‘outline’ being a well-known property that has long been implemented by all of the major engines, with every new implementation comes new opportunities to clarify specs and improve test coverage. Building features like ‘outline’ helps the web platform as much as it helps Servo.&lt;/p&gt;
</content>
  </entry>
</feed>